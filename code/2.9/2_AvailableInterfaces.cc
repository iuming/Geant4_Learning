/*************************************************************************************
 * FileName: 2_AvailableInterfaces
 * Author: 刘铭
 * Describes: 
 * Create: Jan 11 2021, 12:27
 * Last Modify:
 * Modifications: 0
 * **********************************************************************************/

/************************************************
 * G4UIterminal
 * 此界面在命令行终端上打开会话。 G4UIterminal在所有支持的平台上运行。有两种壳，G4UIcsh和G4UItcsh。G4UItcsh支持类似tcsh的readline功能（光标和命令完成），并且可在Mac上的Linux上运行，而它G4UIcsh是可在所有平台上运行的普通标准输入（cin）外壳。以下内置命令可在中找到 G4UIterminal：
 * 
 *  命令                说明
 *  cd，pwd             更改后，显示当前命令目录
 *  ls，lc              列出当前目录中的命令和子目录
 *  history             显示以前的命令
 *  !historyID          重新发出上一个命令
 *  ?command            显示命令的当前参数值
 *  help command        显示命令帮助
 *  exit                终止会话
 * 
 * G4UItcsh支持用户友好的按键绑定a-la-tcsh。G4UItcsh 在Linux和Mac上运行。支持以下键绑定；
 * 
 *  命令                说明
 *  ^A                  将光标移到顶部
 *  ^B                  向后光标（[LEFT]光标）
 *  ^C (Windows终端除外) 在事件处理期间中止运行（软中止）。接受用户命令时，程序将终止
 *  ^D                  删除/退出/显示匹配列表
 *  ^E                  将光标移到末尾
 *  ^F                  前向光标（[RIGHT]光标）
 *  ^K                  光标后清除
 *  ^N                  下一个命令（[DOWN]光标）
 *  ^P                  上一个命令（[UP]光标）
 *  TAB                 命令完成
 *  DEL                 退格键
 *  BS                  退格键
 * 
 * 下例显示了如何设置用户提示:
 *      G4UItcsh* tcsh = new G4UItcsh();
 *      tcsh-> SetPrompt("%s>");
 * 
 * 支持以下字符串作为提示字符串中的替换:
 *  字符串          说明
 *  %s              目前的申请状态
 *  %/              当前工作目录
 *  %h              历史数字
 * 
 * 用户会话中的命令历史记录保存在一个文件中$(HOME)/.g4_hist，该文件 将在下一个会话中自动读取，因此命令历史记录可跨会话使用。
 * **************************************************/

/*****************************************************
 * G4UIXm，G4UIQt和G4UIWin32类
 * 这些接口分别是G4UIterminal通过Motif，Qt和WIN32库实现的版本。G4UIXm使用Motif XmCommand小部件，G4UIQtQt对话框小部件和G4UIWin32Windows“编辑”组件执行命令捕获。如果与使用Xt库，Qt库或WIN32的可视化驱动程序结合使用，这些接口将非常有用。
 * 可使用命令框输入或调用Geant4命令。在命令框中可以通过键入“ TAB”键完成命令。还支持shell命令“ exit，cont，help，ls，cd ...”。可以通过AddMenu和AddButton方法自定义菜单栏。例如：
 *  命令                说明
 *  /gui/addMenu        测试一下
 *  /gui/addButton      测试初始化​​/运行/初始化
 *  /gui/addButton      测试“ Set gun”“ / control / execute gun.g4m”
 *  /gui/addButton      测试“运行一个事件”“ / run / beamOn 1”
 * 
 * G4UIXm在Motif的Unix / Linux上运行。G4UIQt与Qt一起运行。G4UIWin32在Windows上运行。
 * **************************************************/

/*****************************************************
 * G4UIGAG和G4UIGainServer类
 * 它们是Geant4的前端类，它们通过管道与它们各自的图形用户界面，GAG（Geant4自适应GUI）和通过套接字与Gain（网络的Geant4自适应接口）建立连接。尽管GAG必须与Geant4 应用程序在同一系统（Windows或Unixen）上运行，但Gain可以在安装了JRE（Java运行时环境）的远程系统（Windows，Linux等）上运行。甲GEANT4调用应用程序在Unix（Linux）的系统和表现为在网络服务器上。它打开一个端口，等待来自增益的连接。增益能够连接到Unixen系统上不同主机上的多个Geant4 “服务器”。
 * 客户端GUI，GAG和Gain具有几乎相似的外观。因此，在此简要说明GAG的功能。有关详细信息，请参考前面提到的URL。
 * 使用GAG，用户可以选择一个命令，设置其参数并执行它。从某种意义上说，它反映了作为状态机的Geant4的内部状态，因此它是自适应的 。因此，GAG始终为用户提供 Geant4命令，这些命令可以在会话期间添加，删除，启用或禁用。GAG本身不做任何事情，只是通过管道在用户和可执行的仿真程序之间起到中介作用。必须实例化Geant4的前端类G4UIGAG才能与GAG进行通信。GAG在Linux和Windows上运行。Geant4 源代码分发中提供了MOMO.jar ，可以通过以下命令运行它：
 *  %java -jar  /path/to/geant4.10.00/environments/MOMO/MOMO.jar
 * 
 * GAG具有以下功能：
 *  GAG Menu:
 *      菜单用于选择并运行Geant4可执行文件，杀死或退出Geant4进程以及退出GAG。在正常退出或Geant4进程意外终止后，GAG窗口会自动重置以运行另一个Geant4可执行文件。
 *  Geant4 Command tree:
 *      与Geant4 进程建立管道连接后，GAG使用外观类似于文件浏览器的可扩展树浏览器显示命令菜单。禁用的命令以不透明显示。GAG不会显示仅在命令层次结构根目录之下的命令。直接输入字段可用于此类输入。集中显示命令类别和命令的指导。GAG具有命令历史记录功能。用户可以使用旧参数重新执行命令，编辑历史记录或保存历史记录以创建宏文件。
 *  Command Parameter panel:
 *      GAG的参数面板是用户友好的部分。它显示参数名称，其指导，其类型（整数，双精度，布尔值或字符串），可省略，默认值，其范围的表达式和候选列表（例如单位） ）。范围检查由对讲机完成，并且其错误消息显示在弹出对话框中。当参数组件具有候选列表时，将自动显示一个列表框。当命令请求文件时，文件选择器可用。
 *  Logging:
 *      日志可以重定向到调用GAG的终端（xterm或cygwin窗口）。在长时间的执行过程中，可以随意中断它。日志可以保存到与上述重定向无关的文件中。GAG在弹出的警告小部件中显示来自Geant4的警告或错误消息。
 * **************************************************/